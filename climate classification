
import pandas as pd
import requests
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Data Collection from World Bank Climate Portal
def fetch_climate_data():
    # Fetching climate data from the World Bank API (example: temperature anomaly data)
    url = "http://climatedataapi.worldbank.org/climateweb/rest/v1/country/annualavg/tas/2020/2039/IND"  # Example for India
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        df = pd.json_normalize(data, 'data', ['gcm', 'variable', 'model'], errors='ignore')
        return df
    else:
        print("Failed to fetch data. Status Code:", response.status_code)
        return pd.DataFrame()  # Return an empty DataFrame on failure
    
# Load data
data = fetch_climate_data()

# Check if data was fetched successfully
if data.empty:
    print("No data to process.")
else:
    # Step 2: Data Analysis
    # Exploratory Data Analysis (EDA)
    print("Data Overview:")
    print(data.head())
    print("\nSummary Statistics:")
    print(data.describe())

    # Visualize the distribution of climate data
    plt.figure(figsize=(10, 6))
    sns.histplot(data['data'], kde=True)
    plt.title('Distribution of Climate Data')
    plt.xlabel('Temperature Anomaly')
    plt.ylabel('Frequency')
    plt.show()

    # Step 3: Data Processing
    # For simplicity, we'll assume relevant columns are 'year', 'data', 'gcm'
    data = data.dropna()  # Drop missing values

    # Example feature engineering
    features = data[['data']]  # Assume 'data' column represents some climate metric (e.g., temperature anomaly)
    target = data['gcm']       # Assume 'gcm' represents climate classifications (modify as per actual scenario)

    # Split data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

    # Standardize features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Step 4: Modeling
    # Using Random Forest Classifier for better performance
    classifier = RandomForestClassifier(random_state=42, n_estimators=100)
    classifier.fit(X_train_scaled, y_train)

    # Predicting the test set results
    y_pred = classifier.predict(X_test_scaled)

    # Evaluate the model
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {accuracy:.2f}")
    print("Classification Report:")
    print(classification_report(y_test, y_pred))

    # Step 5: Visualization and Final Output
    # Save the results for Power BI dashboard integration
    results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
    results.to_csv('climate_classification_results.csv', index=False)

    # Additional visualization for Power BI
    # Visualize the importance of each feature
    feature_importances = classifier.feature_importances_
    plt.figure(figsize=(10, 6))
    sns.barplot(x=features.columns, y=feature_importances)
    plt.title('Feature Importance')
    plt.xlabel('Feature')
    plt.ylabel('Importance')
    plt.show()

    print("Results saved to 'climate_classification_results.csv'")

    
#2
#this is a data cleaning in climate action project
import pandas as pd
import numpy as np
from scipy.stats import zscore

# Load the dataset
try:
    data = pd.read_csv('climate_data.csv')
    print("Dataset loaded successfully.")
except FileNotFoundError:
    print("Error: The file 'climate_data.csv' was not found.")
    exit()

# Display the first few rows of the dataset
print("Initial data:")
print(data.head())

# Check for missing values
print("\nMissing values in each column:")
print(data.isnull().sum())

# Fill missing values
# Assuming 'Temperature' and 'CO2' are continuous variables, we can fill missing values with the mean
if 'Temperature' in data.columns:
    data['Temperature'] = data['Temperature'].fillna(data['Temperature'].mean())
else:
    print("Error: 'Temperature' column not found in the dataset.")

if 'CO2' in data.columns:
    data['CO2'] = data['CO2'].fillna(data['CO2'].mean())
else:
    print("Error: 'CO2' column not found in the dataset.")

